#!/bin/bash
set -e
set -u

start_mariadb() {
  echo "Starting MariaDB..."
  /usr/sbin/mariadbd "${@:2}" >/dev/null 2>&1 &
  wait_for_mariadb "MariaDB started successfully" "Failed to start MariaDB"
}

stop_mariadb() {
  echo "Stopping MariaDB..."
  if mariadbd_status check_dead nowarn; then
    echo "MariaDB is already stopped"
    return 0
  fi

  /usr/bin/mysqladmin shutdown >/dev/null 2>&1
  wait_for_mariadb "MariaDB stopped successfully" "Failed to stop MariaDB. Please stop it manually."
}

wait_for_mariadb() {
  local success_message=$1
  local failure_message=$2
  local timeout=${MYSQLD_STARTUP_TIMEOUT:-30}

  for i in $(seq 1 "$timeout"); do
    sleep 1
    if mariadbd_status check_alive nowarn; then
      echo "$success_message"
      return 0
    fi
    echo -n "."
  done

  echo "$failure_message"
  exit 1
}

mariadbd_status() {
  local ping_output
  local ping_alive
  local ps_alive
  local pidfile

  ping_output=$(/usr/bin/mysqladmin ping 2>&1)
  ping_alive=$?

  pidfile=$(mariadbd_get_param pid-file)
  ps_alive=0
  if [ -f "$pidfile" ] && ps "$(cat "$pidfile")" >/dev/null 2>&1; then
    ps_alive=1
  fi

  if [ "$1" = "check_alive" ] && [ $ping_alive -eq 1 ] ||
     [ "$1" = "check_dead" ] && [ $ping_alive -eq 0 ] && [ $ps_alive -eq 0 ]; then
    return 0
  else
    if [ "$2" = "warn" ]; then
      echo -e "$ps_alive processes alive and '/usr/bin/mysqladmin ping' resulted in\n$ping_output"
    fi
    return 1
  fi
}

mariadbd_get_param() {
  /usr/sbin/mariadbd --print-defaults | awk -F= -v var="$1" '$1 == var {print $2}'
}

case "${1:-''}" in
  'start')
    start_mariadb "${@}"
    ;;
  'stop')
    stop_mariadb
    ;;
  'restart')
    stop_mariadb
    start_mariadb "${@}"
    ;;
  *)
    echo "Usage: $0 start|stop|restart"
    exit 1
    ;;
esac